{"ast":null,"code":"import _defineProperty from\"/home/geracros13/Escritorio/Proyectos ReactJS/proyecto-citas/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/geracros13/Escritorio/Proyectos ReactJS/proyecto-citas/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/geracros13/Escritorio/Proyectos ReactJS/proyecto-citas/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState}from'react';import uuid from'uuid/v4';//Esta es la libreria que instalamos (npm uuid) para generar un id aleatorio\nvar Formulario=function Formulario(_ref){var crearCita=_ref.crearCita;//Crear State de Citas\nvar _useState=useState({nom_paciente:'',ape_paciente:'',dpi_paciente:'',fecha:'',hora:'',sintomas:''}),_useState2=_slicedToArray(_useState,2),cita=_useState2[0],actualizarCita=_useState2[1];//Crear State para validar los inputs\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],actualizarError=_useState4[1];//Funcion que se ejecuta cada que el usuario escribe en un input\nvar actualizarState=function actualizarState(e){actualizarCita(_objectSpread({},cita,_defineProperty({},e.target.name,e.target.value)));};//Extraer los valores de mi objeto y del formulario\nvar nom_paciente=cita.nom_paciente,ape_paciente=cita.ape_paciente,dpi_paciente=cita.dpi_paciente,fecha=cita.fecha,hora=cita.hora,sintomas=cita.sintomas;//Cuando se envie el form\nvar submitCita=function submitCita(e){e.preventDefault();//Para prevenir el evento por defecto del form que antes enviava el form por el metodo get\n//Validar si el usuario ingreso valores en todos los inputs\nif(nom_paciente.trim()===''||ape_paciente.trim()===''||dpi_paciente.trim()===''||fecha.trim()===''||hora.trim()===''||sintomas.trim()===''){actualizarError(true);return;}//Eliminar el mensaje de error si el usuario queria enviar un input vacio\nactualizarError(false);//Asignar un ID\ncita.id=uuid();//Para que se me genere un id aleatorio\n//Crear la cita\ncrearCita(cita);//Reiniciar el Form una vez enviado\nactualizarCita({nom_paciente:'',ape_paciente:'',dpi_paciente:'',fecha:'',hora:'',sintomas:''});};return React.createElement(Fragment,null,React.createElement(\"h2\",null,\"Crear Cita\"),error?React.createElement(\"p\",{className:\"alerta-error\"},\"Todos los campos son obligatorios :(\"):null,React.createElement(\"form\",{onSubmit:submitCita,autoComplete:\"off\"},React.createElement(\"h4\",null,\"Datos del Paciente\"),React.createElement(\"label\",null,\"Nombres\"),React.createElement(\"input\",{type:\"text\",name:\"nom_paciente\",className:\"u-full-width\",placeholder:\"Nombres\",onChange:actualizarState,value:nom_paciente}),React.createElement(\"label\",null,\"Apellidos\"),React.createElement(\"input\",{type:\"text\",name:\"ape_paciente\",className:\"u-full-width\",placeholder:\"Apellidos\",onChange:actualizarState,value:ape_paciente}),React.createElement(\"label\",null,\"Documento de Identificaci\\xF3n\"),React.createElement(\"input\",{type:\"text\",name:\"dpi_paciente\",className:\"u-full-width\",placeholder:\"DPI\",onChange:actualizarState,value:dpi_paciente}),React.createElement(\"h4\",null,\"Datos de Ingreso\"),React.createElement(\"label\",null,\"Fecha de Ingreso\"),React.createElement(\"input\",{type:\"date\",name:\"fecha\",className:\"u-full-width\",onChange:actualizarState,value:fecha}),React.createElement(\"label\",null,\"Hora de Ingreso\"),React.createElement(\"input\",{type:\"time\",name:\"hora\",className:\"u-full-width\",onChange:actualizarState,value:hora}),React.createElement(\"label\",null,\"S\\xEDntomas\"),React.createElement(\"textarea\",{className:\"u-full-width\",name:\"sintomas\",onChange:actualizarState,value:sintomas}),React.createElement(\"button\",{type:\"submit\",className:\"u-full-width button-primary\"},\"Agregar Cita\")));};export default Formulario;","map":{"version":3,"sources":["/home/geracros13/Escritorio/Proyectos ReactJS/proyecto-citas/src/components/Formulario.js"],"names":["React","Fragment","useState","uuid","Formulario","crearCita","nom_paciente","ape_paciente","dpi_paciente","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","submitCita","preventDefault","trim","id"],"mappings":"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","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport uuid from 'uuid/v4'; //Esta es la libreria que instalamos (npm uuid) para generar un id aleatorio\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) => {\n\n    //Crear State de Citas\n    const [cita, actualizarCita] = useState({\n        nom_paciente: '',\n        ape_paciente: '',\n        dpi_paciente: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n\n    //Crear State para validar los inputs\n    const [error, actualizarError] = useState(false);\n\n\n    //Funcion que se ejecuta cada que el usuario escribe en un input\n    const actualizarState = e =>{\n        actualizarCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        })\n    };\n\n\n    //Extraer los valores de mi objeto y del formulario\n    const { nom_paciente, ape_paciente, dpi_paciente, fecha, hora, sintomas } = cita;\n\n    //Cuando se envie el form\n    const submitCita = e =>{\n        e.preventDefault(); //Para prevenir el evento por defecto del form que antes enviava el form por el metodo get\n\n        //Validar si el usuario ingreso valores en todos los inputs\n        if (nom_paciente.trim() === '' || ape_paciente.trim() === '' || dpi_paciente.trim() === '' || fecha.trim() === '' ||\n         hora.trim() === '' || sintomas.trim() === '') {\n            actualizarError(true);\n            return;\n            \n        }\n\n        //Eliminar el mensaje de error si el usuario queria enviar un input vacio\n        actualizarError(false);\n\n        //Asignar un ID\n        cita.id = uuid();//Para que se me genere un id aleatorio\n\n        //Crear la cita\n        crearCita(cita);\n\n        //Reiniciar el Form una vez enviado\n        actualizarCita({\n            nom_paciente: '',\n            ape_paciente: '',\n            dpi_paciente: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        });\n\n\n\n\n    } \n\n    return(\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios :(</p>: null}\n\n            <form\n                onSubmit={submitCita}\n                autoComplete='off'\n            >\n                <h4>Datos del Paciente</h4>\n                <label>Nombres</label>\n                <input\n                    type=\"text\"\n                    name=\"nom_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombres\"\n                    onChange={actualizarState}\n                    value={nom_paciente}\n                />\n                <label>Apellidos</label>\n                <input\n                    type=\"text\"\n                    name=\"ape_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"Apellidos\"\n                    onChange={actualizarState}\n                    value={ape_paciente}\n                />\n                <label>Documento de Identificación</label>\n                <input\n                    type=\"text\"\n                    name=\"dpi_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"DPI\"\n                    onChange={actualizarState}\n                    value={dpi_paciente}\n                />\n                <h4>Datos de Ingreso</h4>\n                <label>Fecha de Ingreso</label>\n                <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n                <label>Hora de Ingreso</label>\n                <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n                <label>Síntomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar Cita</button>\n\n            \n            </form>\n\n\n\n        </Fragment>\n    );\n}\n\nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario;"]},"metadata":{},"sourceType":"module"}