{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","nom_paciente","ape_paciente","dpi_paciente","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","autoComplete","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e4ccdb74.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport uuid from 'uuid/v4'; //Esta es la libreria que instalamos (npm uuid) para generar un id aleatorio\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) => {\n\n    //Crear State de Citas\n    const [cita, actualizarCita] = useState({\n        nom_paciente: '',\n        ape_paciente: '',\n        dpi_paciente: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n\n    //Crear State para validar los inputs\n    const [error, actualizarError] = useState(false);\n\n\n    //Funcion que se ejecuta cada que el usuario escribe en un input\n    const actualizarState = e =>{\n        actualizarCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        })\n    };\n\n\n    //Extraer los valores de mi objeto y del formulario\n    const { nom_paciente, ape_paciente, dpi_paciente, fecha, hora, sintomas } = cita;\n\n    //Cuando se envie el form\n    const submitCita = e =>{\n        e.preventDefault(); //Para prevenir el evento por defecto del form que antes enviava el form por el metodo get\n\n        //Validar si el usuario ingreso valores en todos los inputs\n        if (nom_paciente.trim() === '' || ape_paciente.trim() === '' || dpi_paciente.trim() === '' || fecha.trim() === '' ||\n         hora.trim() === '' || sintomas.trim() === '') {\n            actualizarError(true);\n            return;\n            \n        }\n\n        //Eliminar el mensaje de error si el usuario queria enviar un input vacio\n        actualizarError(false);\n\n        //Asignar un ID\n        cita.id = uuid();//Para que se me genere un id aleatorio\n\n        //Crear la cita\n        crearCita(cita);\n\n        //Reiniciar el Form una vez enviado\n        actualizarCita({\n            nom_paciente: '',\n            ape_paciente: '',\n            dpi_paciente: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        });\n\n\n\n\n    } \n\n    return(\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios :(</p>: null}\n\n            <form\n                onSubmit={submitCita}\n                autoComplete='off'\n            >\n                <h4>Datos del Paciente</h4>\n                <label>Nombres</label>\n                <input\n                    type=\"text\"\n                    name=\"nom_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombres\"\n                    onChange={actualizarState}\n                    value={nom_paciente}\n                />\n                <label>Apellidos</label>\n                <input\n                    type=\"text\"\n                    name=\"ape_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"Apellidos\"\n                    onChange={actualizarState}\n                    value={ape_paciente}\n                />\n                <label>Documento de Identificación</label>\n                <input\n                    type=\"text\"\n                    name=\"dpi_paciente\"\n                    className=\"u-full-width\"\n                    placeholder=\"DPI\"\n                    onChange={actualizarState}\n                    value={dpi_paciente}\n                />\n                <h4>Datos de Ingreso</h4>\n                <label>Fecha de Ingreso</label>\n                <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n                <label>Hora de Ingreso</label>\n                <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n                <label>Síntomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar Cita</button>\n\n            \n            </form>\n\n\n\n        </Fragment>\n    );\n}\n\nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCita}) => (\n    <div className=\"cita\">\n        <h3>Datos del paciente</h3>\n        <p>Nombres: <span>{cita.nom_paciente}</span></p>\n        <p>Apellidos: <span>{cita.ape_paciente}</span></p>\n        <p>DPI: <span>{cita.dpi_paciente}</span></p>\n        <p>Fecha Ingreso: <span>{cita.fecha}</span></p>\n        <p>Hora Ingreso: <span>{cita.hora}</span></p>\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\n\n        <button\n            className=\"button eliminar u-full-width\"\n            onClick={ () => eliminarCita(cita.id) } //La colocamos asi, para que espere a que suceda el onClick\n        >Eliminar Cita</button>\n    </div>\n);\n\nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'; \nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //Citas en el local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n\n  //Arreglo de todas las Citas para listarlas\n  const [citas, guardarCitas] = useState([]);\n\n\n  //Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas] );\n\n\n\n  //Funcion que tome las citas actuales y agrege la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  };\n\n  //Funcion eliminar cita\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id );//La razon por la que colocamos !== es para que me traiga todas las citas, menos la de ese id, y se elimina\n    guardarCitas(nuevasCitas);\n  };\n\n  //Mensaje que aparecera cuando hay y cuando no hay citas\n  const titulo = citas.length === 0 ? 'No hay citas para hoy': 'Adiministra tus Citas';\n\n\n  return (\n\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n            crearCita={crearCita}\n            />\n          </div> \n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key= {cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n\n          </div>\n        </div>\n      </div>\n\n\n    </Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}